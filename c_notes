    C++ 

 - Compiler gebraucht denn cpu versteht nur Machinecode
 - menschen lesen machine ode nicht gern
 - (ausführen - run/interpret; kompilieren)
 - 2 Teil
	1. Eigenen code
		- erste Befehl kommt direkt after int main() {		
	2. Bibliotheken
		i. compiled code: ".a", ".so" (linux); ".lib", ".dll" (windows)
		ii. wichtiger: inhaltsverzeichnis, header: .h, .hpp, .hxx
 
 - Um in eigenen code Bib zu benutzen braucht man nur inhaltsverzeichnis:
	#include <bib name>

 I. Kompilier erzeugt das ausführbar Program in 2 Phasen:
	1. Übersetzung der .cpp datien in Machinesprache
		=> Objektdatei (.o in Linux; .obj in Windows)
		(g++ -c helloworld.cpp)

	2. Linking: alle programteile (objektdatei, bibliotheksdatei) zu einer ausfühbaren Datei verbinden 
		(g++ -o helloworld helloworld.o)

	1+2 zusammen: g++ -o helloworld helloworld.cpp

 II. Was tut ein Computer?
	1. der Speicher mit der Eingabe füllen
	2. Program verändert der Speicher
	3. die Speicherbelegung am Ende ist Ergebnis

	- Hochsprache nutzen variables, statt Adresse
	-Variable
		1. Namen
			- a-zA-Z_0-9
			- "_" am anfang ist reserviert für die std bib; verboten.
		2. ein dazgehöriges Speicher
		3. Typ
			- legt fest, wie der speicher implementiert wird unt welche Operation erlaubt sind

	- zB: std::cout ist variable von std library
	- Operators: << is left shift
	- Literale:
		in "" ist Stringliteral
		321 ist Integerliteral
		3.1 oder 3.1e-4 sind float
		true/false ist boolscheliteral
		in '' ist Zeichenliteral
		
--------------------------------------------------------------------------------------------------

I. Strings - std::string
  1. Declaration
    typname variablename [ = init];
    zB: std::string var;
    
  2. Concatenation: 
    std::cout << "Hello, " << var << std::endl;
    
II. Arithmetik
  1. Zahldatentyp 
    - Ganze zahl (pos/neg) -> int
    - natürliche zahlen (>=0) -> unsigned
    - wahrheitwerte (true/false) -> bool
    - reele Zahlen -> float (32 bit) / double (64 bit)
	zb: double d = 1.4e-12;
	
  2. Übliche arithmetische operationen: +,-,*,/
    - Punktrechnung oder strichrechnung
    - Ausdrück in Klammern zuerst
    - Integerdivision 
      - 3/2 -> 1; 3.0/2 -> 1.5
      
  3. Rest (remainder) 
    d = a/b; a = d*b + rest; rest = a - (a/b) * b
    
  4. Typumwandlung
    double f = 1.5;
    int i = f; // implizite 
    //ODER
    int i = (int)f; //explizite
    int i = static_cast<int>(f); //auch explizite
    
  5. Algebraisiche Funktionen - #include <cmath>
    - sqrt(f); sin(f); cos(f); tan(f); exp(f); pow(f,n); log(f)
    - Rundungsfunktionen: result always double
      floor(f); //largest int less than f 
      ciel(f); //smallest int greater than f
      round(f); //round zur nächtste ganze zahl

III. Boolsche Operationen
    a == b
    a != b
    a < b
    a <= b
    a > b
    a >= b

    Und: &&
    Oder: ||
    Nicht: !
--------------------------------------------------------------------------------
Funktionen

    - Kapseln häufig benotigen code, damit man ihn nur einmal schreiben muss und wiederverwenden kann.
    - Haben ein Name: [a-zA-Z][0-9]_ (nicht mit zahl beginnnen darf)
    - Haben argumenten, die paar sind: Typ und Name; durch komma getrennt.
    - Haben ergebnis, das Typ ist.
    - Syntax für declaration (in header file mit .hpp) einer bibliothek:

    Ergebnistyp funktionname(
        Argtyp1 arg1 ...
        ArgtypN argN);

    - Syntax für definition (.cpp):

    Ergebnistyp funktionname(
        Argtyp1 arg1 ...
        ArgtypN argN)
    {
        ...
    }
    - Wenn die funktion nichts zurück gibt, verwendet man "void".

    Beispiel:
    
    int mod(int a, int b)
    {
        return a - (a/b)*b;
    }

Header files:

    .hpp file has declaration 
    .cpp function file has #includes "headername" and definition
    .cpp main file has #includes "headername"

    To compile:
        g++ -Wall -o <name> function_file.cpp main_file.cpp

------------------------------------------------------------------------
Test-tips
typische und untypische fälle
-untypische Fälle:
    Fehlerfälle (zb Wurzel aus negativer Zahl)
    Randfälle (am Rand eines Gebiets, wo sich der algorismus ändert, 
    zB Wurzel aus 0, beim Sortieren: schon sortierte Daten, rückwärts sortierte
    Daten, Wochentagsalgorithmus: Monate Januar/Feb und monate März - Dez
    (wegen der monatszählung ab märz), rundes Jahrhundert und Jahr davor und 
    danach
    Testdaten händische ausrechnen, zb wurzel(4)
    Nachschlagen (google, Kalender)
----------------------------------------------------------------------------
struct

    - es gibt in c++ einfache datentypen (int, float) und 
        zusammengesetzte (aus vorhanden zusammengebiet)
    - zusammengesetzte können vordefiniert sein in bibliothek oder selbst
        definiert.
    - 2 fast äquivalente Arten 'struct' und 'class'
Beispiel 'return' kann nur eine Variable züruckgeben
Was, wenn eine funktion mehrere ergebnisse hat?

Lösung: Definition in Header-file

struct Datum
{
    int day;
    int month;
    int year;
};
  
Benutzung:

Datum date; // neue variable anlegen  

date.day = 23;
date.month = 5;
date.year = 1994;

Funktion:

Datum ostern(int year)
{   
    Datum date;
    ...
    return date;
}

Datum easter = oster(2015);

//seit c++ 11:

auto easter = oster(2015);
--------------------------------------------------------------------------

Schleifen (Loops)

-den selben code mit unterschiedlichen variablen (oder werten in den variablen)
    immer wieder ausführen

while(bedingung)
{
    ...
}
    
for(intit; bedingung; inkrement)
{
    ...
}   

break; //exit loop
continue; //direkt zum schleifenkopf

--------------------------------------------------------------------------

Strings:

    std::string ist ein vordefinierter Typ('class')

----------------------------------------------------------------------------

Verallgemeinern: Folge von elementen bit beliebigem(arbitrary) Typ 

std::vector // #include <vector>

//Syntax:
std::vector<ElementTyp> v;

std::vector<int> v = {1,1,2,3,5,8,13};

//v[2] => 1

//Man darf mit syntax v[n] nur auf Elementen zugreifen, die schon existierern,
//sonst Programmabsturtz
// 0 <= n < v.size()
//Alternitive: v.at(n) : will check the out of bounds exception


//Größe des Vectors festlegen:
//- Bei init:
int size = 4;
vector<int> v(size);
v => {0,0,0,0};
//Vector is now initialized to all zeros.

//Größe mit Anfangswerten

//Größe später ändern
v.resize(new_size);

//Größe bei Einfügen neuer Elemente anpassen
v.push_back(new_element);

v.insert(v.begin()+position, new_element); // bedeutet 'new_element' inserted at position

//push_back() ist effizienter als insert()

-------------------------------------------------------------------------------------

# Aliasing in Kommandozeile:

alias [name='value']

alias g11='g++ -std=c++11 -Wall'

----------------------------------------------------------------------------------

Warum ist push_back() effizienter als insert?
    *vector muss intern Speicher für alle Elemente anlegen (also mindestens soviel
    Speicher, wie für size() elemente notwendig ist)
    *wenn ein neues Element eingefügt wird, braucht der vector mehr Speicher
    *Naives Vorgehen:
        old_size = v.size();
        new_size = old_size + 1;
        neuen Speicher der Größe new_size besorgen.
        Vorhandene Elemente aus dem alten in den neuen Speicher kopieren.
        im neuen Speicher das Neue Element einfügen, den alten Speicher wegwerfen.
        
    *push_back():
        old_size = v.size();
        new_size = old_size * 2;
        Deshalb im neuen Speicher sind jetzt noch 'old_size - 1'Elemente unbenutzt
        pushback braucht dann keinen neuen Speichter, weil ja genug Reserve 
        Das erste kopieren ist wieder notwendig, wenn new_size erschöpft ist, also
        nach 'old_size'-mall push_back()
        
v.resize() ändert v.size()
v.reserve() ändert v.capacity(), aber nicht v.size()

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

StandardBibliothek Funktionen

//hatten schon cin/cout benuzt
//Es gibt auch ifstream (input file stream) and ofstream (output file stream)
// zB:

ifstream infile("filename.txt");

//infile kann jetzt genauso werden wie std::cin

int i;

infile >> i;

ofstream outfile("otherfile.txt");

outfile << i;

//If cant open:

ifstream infile("filename.txt");

if (!infile.is_open())
{
    cout << "Unable to read file." << endl;
    return 1; //1 is error code, vielleicht existiert das File nicht
}

//Auch wichtig:

file.good(); //bool: true if no flags (badbit, failbit, eofbit) are set

// Funktionen der Std lösen häufig wiederkehrende Probleme

//copy(); Kopiert ein Datenstruktur in eine andere. zB:

vector<int> a = {1,2,3,4};
vector<int> b(a.size()); //Muss die gleiche Länge haben
copy(a.begin(), a.end(), b.begin());

//Man kann die Zahlen beim Kopieren verändern. Dann heißt die Funktion transform();
//Man Übergibt ihr als letzten Parameter, welche Veränderung man möchte. 
//Genauer: man übergibt eine Funktion, die die Veränderung ausführt. zB:

int quadrat(int i)
{
    return i*i;
}

int main()
{
    vector<int> a = {1,2,3,4};
    vector<int> b(a.size());
    copy(a.begin(), a.end(), b.begin(), quadrat);
}

//Sehr häufig muss man eine Array sortieren. dafür gibt's sort(). Dies sortiert 
//einen vector in-place

vector<int> a = {21,13,8,5,3,2,1,1};
sort(a.begin(), a.end());
print_vector(a);

//Auch mit sort: ein comparator.
bool comparator(typ x, typ y)
{
    ...
}
sort(a.begin(), a.end(), comparator);

//Auch gibt's random_shuffle()

vector<int> a = {21,13,8,5,3,2,1,1};
random_shuffle(a.begin(), a.end());
print_vector(a);

=============================================================================
=============================================================================
20.5 Stdbibliothek

//Mehr Funktionen
//copy_if(InputIterator first, InputIterator last, OutputIterator result, 
//        Predicate pred);
        
//use:
//result is OutputIterator
auto result = copy_if(a.begin(),a.end(),b.begin(), is_even);
//count is Zahl der kopierte Elemente
int count = res-b.begin(); 
b.resize(count)


//count_if(InputIterator first, InputIterator last, OutputIterator result, 
//        Predicate pred)

//search(): search array for string
//fill(): initialize array
//reverse(): reverse sequence
//rotate(): rotate a sequence so last becomes first, first becomes second,etc.

//Datenstrukturen

string, vector schon gelernt

std::map<char,float> m;
m['a'] = 1.3;
...

//Man muss keinen Speicher reservieren. Es ist automatisch
//Intern speichert std::map die Daten als Suchbaum
//Veransetzung: key typ muss < operation unterstützen; mit strings ist es lexicographical
//Beliebte indextypen:
//-string
//-int (wenn man kein zusammenhangige indecies will, oder negative)

//Varianten:
//multimap: der selbe index kann mehr als ein element.
//set:
//unordered_map: same as map but no order (not BST, sondern Hashtable)

==============================================================================

==============================================================================

Referenzen:

Neue Variablename für eine vorhandene Variable. Die Referenz hat:
    - einen Typ, denselben wie die ursprüngliche Variable, 
    -Speicher, aber keinen eigenen, sondern denselben wie die ursprünglichen variable

int length(string s){return s.size();} //Pass by value
int length(string & s){return s.size();} //Pass by reference mit & symbol

erspart teure Kopie, aber es erlaubt auch, die ursprüngliche Variable innerhalb
der Funktion zu ändern:

void append_question(string & s){ s+= "?";} //Ändert die ursprüngliche variable

Zwei Möglichkeiten für Referenzen zu nutzen:
1. Die Funktion, der die Variable übergeben wird, will die variable modifizeren
2. Die Funktion will die Variable nur lesen, nicht modifizieren. Dann haben
Referenzen immer noch Sinn, weil man dadurch das Kopieren spart.

Für Nummer zwei nutzt man "const &" um die param read-only zu machen.

Vorsicht is geboten, wenn die ursprüngliche Variable vor der Referenz 
freigegeben/gelöscht wird. Dann ist der Speicher, auf den die Referenz zeigt,
nicht mehr vorhanden => Programabsturz, wenn man die Referenz zugreifft.
Das heißt "Dangling reference"
zB:

string & create_string()
{
    string s = "abcd";
    return s;
}//Scope of s ends
//in main:
string & t = create_string();
cout << t << endl; //Absturz, weil s ist gelöscht

<chrono>
auto start = std::chrono::high_resolution_clock::now()
--------------------------------------------------------------------------------------

Exception handling

#include <stdexcept>

Typische Verwendung: am anfang ein Funktion prüfen ob die ubergebene Argumente
erlaubt sind.
zB: sqrt(x) x must not be negative

try 
{

}
catch(exception& e)
{

}

throw; keyword  ist analog zu 'return', aber es gibt eine Exception zurück.

=========================================================================================
=========================================================================================
Zum Optimizierung mit Kompiler:
g++ -O ...

Eigenen Datentypen

Wenn existierende Datentypen nicht optimal für die Aktuelle Aufgabe.

zB: 
    -Rationale Zahlen 
    -Compexe Zahlen
    - Bild mit vector 
    
Es gibt 3 Methoden, eigenen Datentypen zu machen:
    1. struct
    2. class
    3. enum
    
Eine class vereint zusammengehörende Informationen einen datenstruktur.
Besteht aus:
    - öffentlichen Teil: funktionalität für benutzer der class - sollte
        sich nur selten ändern
    - internen Teil: für die Implementation und Speicherverwaltung- sollte
        "gekapsult", also nicht von außen sichtbar
    - default  => private

    class Name 
    {
        //öffentliche Teil
        public:
        
        //privaten Teil
        private:
        
    };

struct funkioniert praktish genauso, aber default ist public.

Jede class braucht mindestens eine Constructor, der den Speicher der Variable
initialisiert. Falls der Programmer keinen schreibt, generiert den Compiler einen 
automatisch

Constructor Arten:
    - Standard constructor (default) hat keinen argumenten
    - Kopierkonstructor kopiert eingegebene variable nach neue variable
    
Constructors sind funktionen, die nichts returnen (sie initialisieren)
Konvention: die privaten Variablen einer Klasse werden oft mit dem Suffix '_' benannt

Beispiel: 2D Point

    class Point
    {
        public:
            Point()
            {
                x_ = 12;
                y_ = 25;
            }
        
        private:
            float x_, float y_;    
    };
    
    //ODER:
    class Point
    {
        public:
            Point() : x_(12),y_(25)
            {}
        
        private:
            float x_, float y_;    
    };
    
    //ODER:
    class Point
    {
        public:
            Point(Point const & other) :
            x_(other.x_), y_(other.y_)
            {}
        
        private:
            float x_, float y_;    
    };
    
    //ODER:
    class Point
    {
        public:
            Point(float x, float y) :
            x_(x), y_(y)
            {}
            
            float x() { return x_;};
            float y() { return y_;};
        private:
            float x_, float y_;    
    };
    
Um die Daten später zu ändern, gibt es mehrere Möglichkeiten:

    - Zuweisungsoperator: 
        Point p1(1,2);
        Point p2(3,4);
        p1 = p2;

    - Explizit programmierte Zuweisungs operator:
    
    class Point
    {
        ...
        public:
            
            Point & operator=(Point const & other)
            {
                x_ = other.x();
                y_ = other.y();
                return this*;
            }
    }
    
Wenn der Programierer die vom Compiler automatisch generierten Funktionen 
verwenden will, kann er das seit C++ 11 mit dem Schlüsselwort "default" 
explizit spezifizieren:

    class Point

    {

      public:

        Point(Point const & other) = default;

        Point & operator=(Point const & other) = default;

    };
    
Vorteil: leser sieht, dass es absicht war, dass sie nicht implementiert sind

Möglichkeit 2:
    schreibende Zugriffsfunktion:
    
    class Point
    {
        ...
        public:
            void setX(float newX)
            {
                x_ = newX;
            }
    }

========================================================================
´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`´`
Default funktion argumente
°°°°°°°°°°°°°°°°°°°°°°°°°°°
int foo(int i, int j) { return i + j + 1;}

//Default:
int foo(int i = 0, int j = -1)
{
    return i + j + 1;
}

foo() == 0;
foo(1) == 1; //i <- 1, so result is 1+-1+1.

//Auch mit Konstruktor

Image(int width=0, int height = 0) : ...


